name: MLOps CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Manual trigger

env:
  DOCKER_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/credit-scoring-api
  EC2_HOST: ${{ secrets.EC2_HOST }}

jobs:
  # JOB 1: Code Quality & Testing
  test:
    name: Code Quality & Unit Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov

    - name: Lint with flake8
      run: |
        pip install flake8
        # Stop build if there are Python syntax errors or undefined names
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 src/ --count --max-complexity=10 --max-line-length=127 --statistics
      continue-on-error: false
    
    - name: Run unit tests with coverage
      run: |
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=term
      continue-on-error: false
    
    #- name: Upload coverage reports
     # uses: codecov/codecov-action@v3
      #with:
       # file: ./coverage.xml
        #flags: unittests
        #name: codecov-umbrella
        #fail_ci_if_error: false

  # JOB 2: Build & Push Docker Image
  build:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.DOCKER_IMAGE }}
        tags: |
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test Docker image
      run: |
        docker pull ${{ env.DOCKER_IMAGE }}:latest
        docker run -d -p 8000:8000 --name test-api ${{ env.DOCKER_IMAGE }}:latest
        sleep 15
        curl -f http://localhost:8000/health || exit 1
        docker stop test-api

  # JOB 3: Deploy to EC2
  deploy:
    name: Deploy to AWS EC2
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Deploy to EC2 via SSH
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ubuntu
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          # Pull latest image
          docker pull ${{ env.DOCKER_IMAGE }}:latest
          
          # Stop and remove old container
          docker stop credit-scoring-prod || true
          docker rm credit-scoring-prod || true
          
          # Run new container
          docker run -d \
            --name credit-scoring-prod \
            -p 8000:8000 \
            --restart unless-stopped \
            --memory="3g" \
            --cpus="1.5" \
            ${{ env.DOCKER_IMAGE }}:latest
          
          # Verify deployment
          sleep 10
          curl -f http://localhost:8000/health || exit 1
          
          # Cleanup old images
          docker image prune -af
    
    - name: Verify deployment
      run: |
        sleep 15
        curl -f http://${{ secrets.EC2_HOST }}:8000/health

  # JOB 4: Post-Deployment Health Check
  health-check:
    name: Post-Deployment Verification
    runs-on: ubuntu-latest
    needs: deploy
    
    steps:
    - name: Check API Health
      run: |
        curl -f http://${{ secrets.EC2_HOST }}:8000/health
        curl -f http://${{ secrets.EC2_HOST }}:8000/metrics
    
    - name: Notify deployment success
      run: |
        echo "âœ… Deployment successful!"
        echo "API URL: http://${{ secrets.EC2_HOST }}:8000"

